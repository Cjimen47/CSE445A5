//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TryIt.LoginService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginService.ILoginService")]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CreateAccount", ReplyAction="http://tempuri.org/ILoginService/CreateAccountResponse")]
        bool CreateAccount(string username, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CreateAccount", ReplyAction="http://tempuri.org/ILoginService/CreateAccountResponse")]
        System.Threading.Tasks.Task<bool> CreateAccountAsync(string username, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Login", ReplyAction="http://tempuri.org/ILoginService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Login", ReplyAction="http://tempuri.org/ILoginService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Logout", ReplyAction="http://tempuri.org/ILoginService/LogoutResponse")]
        bool Logout(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Logout", ReplyAction="http://tempuri.org/ILoginService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/IsUserLoggedIn", ReplyAction="http://tempuri.org/ILoginService/IsUserLoggedInResponse")]
        bool IsUserLoggedIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/IsUserLoggedIn", ReplyAction="http://tempuri.org/ILoginService/IsUserLoggedInResponse")]
        System.Threading.Tasks.Task<bool> IsUserLoggedInAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/RemoveAccount", ReplyAction="http://tempuri.org/ILoginService/RemoveAccountResponse")]
        bool RemoveAccount(string sessionId, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/RemoveAccount", ReplyAction="http://tempuri.org/ILoginService/RemoveAccountResponse")]
        System.Threading.Tasks.Task<bool> RemoveAccountAsync(string sessionId, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangeUsername", ReplyAction="http://tempuri.org/ILoginService/ChangeUsernameResponse")]
        bool ChangeUsername(string sessionId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangeUsername", ReplyAction="http://tempuri.org/ILoginService/ChangeUsernameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUsernameAsync(string sessionId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangePassword", ReplyAction="http://tempuri.org/ILoginService/ChangePasswordResponse")]
        bool ChangePassword(string sessionId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangePassword", ReplyAction="http://tempuri.org/ILoginService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string sessionId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangeEmail", ReplyAction="http://tempuri.org/ILoginService/ChangeEmailResponse")]
        bool ChangeEmail(string sessionId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangeEmail", ReplyAction="http://tempuri.org/ILoginService/ChangeEmailResponse")]
        System.Threading.Tasks.Task<bool> ChangeEmailAsync(string sessionId, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : TryIt.LoginService.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.ClientBase<TryIt.LoginService.ILoginService>, TryIt.LoginService.ILoginService {
        
        public LoginServiceClient() {
        }
        
        public LoginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateAccount(string username, string email, string password) {
            return base.Channel.CreateAccount(username, email, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAccountAsync(string username, string email, string password) {
            return base.Channel.CreateAccountAsync(username, email, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string sessionId) {
            return base.Channel.Logout(sessionId);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string sessionId) {
            return base.Channel.LogoutAsync(sessionId);
        }
        
        public bool IsUserLoggedIn(string username) {
            return base.Channel.IsUserLoggedIn(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLoggedInAsync(string username) {
            return base.Channel.IsUserLoggedInAsync(username);
        }
        
        public bool RemoveAccount(string sessionId, string username, string password) {
            return base.Channel.RemoveAccount(sessionId, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAccountAsync(string sessionId, string username, string password) {
            return base.Channel.RemoveAccountAsync(sessionId, username, password);
        }
        
        public bool ChangeUsername(string sessionId, string username) {
            return base.Channel.ChangeUsername(sessionId, username);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUsernameAsync(string sessionId, string username) {
            return base.Channel.ChangeUsernameAsync(sessionId, username);
        }
        
        public bool ChangePassword(string sessionId, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(sessionId, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string sessionId, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(sessionId, oldPassword, newPassword);
        }
        
        public bool ChangeEmail(string sessionId, string email) {
            return base.Channel.ChangeEmail(sessionId, email);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeEmailAsync(string sessionId, string email) {
            return base.Channel.ChangeEmailAsync(sessionId, email);
        }
    }
}
